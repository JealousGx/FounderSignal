name: Deploy and Clear Cache

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: "Select environment to deploy"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production

jobs:
  deploy:
    runs-on: ubuntu-latest
    outputs:
      env: ${{ steps.deploy.outputs.env }}

    steps:
      - name: Deploy to Vercel
        id: deploy
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_NAME: ${{ secrets.VERCEL_PROJECT_NAME }}
        run: |
          ENV="${{ github.event.inputs.environment }}"
          echo "Deploying to environment: $ENV"
          echo "Vercel Project Name: $VERCEL_PROJECT_NAME"

          echo "Starting '"$ENV"' deployment..."
          RESPONSE=$(curl -s -X POST "https://api.vercel.com/v13/deployments" \
            -H "Authorization: Bearer $VERCEL_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"name": "'"$VERCEL_PROJECT_NAME"'", "target": "'"$ENV"'"}')

          echo "Vercel response: $RESPONSE"

          DEPLOYMENT_ID=$(echo "$RESPONSE" | jq -r '.id // empty')

          if [ -z "$DEPLOYMENT_ID" ] || [ "$DEPLOYMENT_ID" = "null" ]; then
            echo "Deployment failed or response invalid."
            exit 1
          fi

          echo "Deployment ID: $DEPLOYMENT_ID"
          echo "env=$ENV" >> $GITHUB_OUTPUT

      - name: Clear Cloudflare Cache

        if: steps.deploy.outputs.env == 'production'
        env:
          CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}
          CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
        run: |
          echo "Purging Cloudflare cache for production"

          RESPONSE=$(curl -X POST "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE_ID/purge_cache" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $CLOUDFLARE_API_KEY" \
            --data '{"purge_everything":true}')
          echo "Cloudflare Response: $RESPONSE"
          echo "Cache cleared successfully"
