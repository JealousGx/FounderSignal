name: Deploy and Clear Cache

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: "Select environment to deploy"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production

jobs:
  deploy:
    runs-on: ubuntu-latest
    outputs:
      env: ${{ steps.deploy.outputs.env }}

    steps:
      - name: Deploy to Vercel
        id: deploy
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_NAME: ${{ secrets.VERCEL_PROJECT_NAME }}
        run: |
          ENV="${{ github.event.inputs.environment }}"
          echo "Deploying to environment: $ENV"
          echo "Vercel Project Name: $VERCEL_PROJECT_NAME"

          echo "Starting '"$ENV"' deployment..."
          RESPONSE=$(curl -s -X POST "https://api.vercel.com/v13/deployments" \
            -H "Authorization: Bearer $VERCEL_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"name": "'"$VERCEL_PROJECT_NAME"'", "target": "'"$ENV"'"}')

          echo "Vercel response: $RESPONSE"

          DEPLOYMENT_ID=$(echo "$RESPONSE" | jq -r '.id // empty')
          DEPLOYMENT_URL=$(echo "$RESPONSE" | jq -r '.url // empty')


          if [ -z "$DEPLOYMENT_ID" ] || [ "$DEPLOYMENT_ID" = "null" ]; then
            echo "Deployment failed or response invalid."
            exit 1
          fi

          echo "Deployment ID: $DEPLOYMENT_ID"
          echo "Deployment URL: $DEPLOYMENT_URL"

          # Set outputs for later steps
          echo "env=$ENV" >> $GITHUB_OUTPUT
          echo "deployment_id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT

      - name: Wait for Vercel Deployment to be Ready
        id: wait_vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          DEPLOYMENT_ID="${{ steps.deploy.outputs.deployment_id }}"

          echo "Waiting 75 seconds before first status check..."
          sleep 75  # initial delay of 1 minute 15 seconds, average deployment time

          MAX_WAIT=30 # Maximum wait time in seconds
          INTERVAL=10
          ELAPSED=0

          while [ $ELAPSED -lt $MAX_WAIT ]; do
            STATUS_RESPONSE=$(curl -s -X GET "https://api.vercel.com/v13/deployments/${DEPLOYMENT_ID}" \
              -H "Authorization: Bearer $VERCEL_TOKEN")
            READY_STATE=$(echo "$STATUS_RESPONSE" | jq -r '.readyState')

            echo "Current status: $READY_STATE"

            if [ "$READY_STATE" = "READY" ]; then
              echo "Deployment is ready!"
              exit 0
            elif [ "$READY_STATE" = "ERROR" ]; then
              echo "Deployment failed with error state."
              exit 1
            fi

            echo "Waiting $INTERVAL seconds before next check..."
            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
          done

          echo "Timeout exceeded waiting for deployment to be ready."
          exit 1

      - name: Clear Cloudflare Cache
        if: steps.deploy.outputs.env == 'production'
        env:
          CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}
          CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
        run: |
          echo "Purging Cloudflare cache for production"

          RESPONSE=$(curl -X POST "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE_ID/purge_cache" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $CLOUDFLARE_API_KEY" \
            --data '{"purge_everything":true}')
          echo "Cloudflare Response: $RESPONSE"
          echo "Cache cleared successfully"
